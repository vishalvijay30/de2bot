-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2876;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A32;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 1079;  -- 	STORE  DVel        ; Reset API variables
           009 : 1078;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8216;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 81F8;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A45;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A42;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A42;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 122C;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 522C;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A43;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A32;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           024 : B800;  -- 	LOADI  0
           025 : 1079;  -- 	STORE  DVel        ; zero desired forward velocity
           026 : 1078;  -- 	STORE  DTheta      ; desired heading = 0 degrees
           027 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           028 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           029 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02A : 0A47;  -- 	LOAD 	Mask50
           02B : 98B2;  -- 	OUT		SONAREN	; Enable sonars 0 and 5 (180 degrees apart)
           02C : B92C;  -- 	LOADI	300
           02D : 1079;  -- 	STORE	DVel
           02E : 80DF;  -- 	CALL	NegateSpeed
           02F : B9F4;  -- 	LOADI	500
           030 : 80D0;  -- 	CALL	MoveDistance
           031 : 80DF;  -- 	CALL	NegateSpeed
           032 : B85A;  -- 	LOADI	90
           033 : 80C1;  -- 	CALL	Turn
           034 : B9F4;  -- 	LOADI	500
           035 : 80D0;  -- 	CALL	MoveDistance
           036 : 286D;  -- 	JUMP	Die
           037 : BFA6;  -- 	LOADI	-90
           038 : 80C1;  -- 	CALL	Turn
           039 : 0879;  -- 	LOAD	DVel
           03A : 9805;  -- 	OUT		SSEG2
           03B : 0A50;  -- 	LOAD	Ft4
           03C : 80D0;  -- 	CALL	MoveDistance
           03D : 90AD;  -- 	IN		DIST5
           03E : 122E;  -- 	STORE	SonVal5
           03F : 90A8;  -- 	IN		DIST0
           040 : 122D;  -- 	STORE	SonVal0
           041 : 9804;  -- 	OUT 	SSEG1
           042 : 0A2D;  -- 	LOAD	SonVal0
           043 : 1A3F;  -- 	ADD		Sect3WallDistance
           044 : 3847;  -- 	JPOS	Section3_far
           045 : 304C;  -- 	JNEG	Section3_close
           046 : 4051;  -- 	JZERO	Section3_cont
           047 : B802;  -- 	LOADI	2
           048 : 80C1;  -- 	CALL	Turn
           049 : 0A40;  -- 	LOAD ReevalDistance
           04A : 80D0;  -- 	CALL	MoveDistance
           04B : 2851;  -- 	JUMP	Section3_cont
           04C : BFFE;  -- 	LOADI	-2
           04D : 80C1;  -- 	CALL	Turn
           04E : 0A40;  -- 	LOAD ReevalDistance
           04F : 80D0;  -- 	CALL	MoveDistance
           050 : 2851;  -- 	JUMP	Section3_cont
           051 : 0A2E;  -- 	LOAD	SonVal5
           052 : 1A3D;  -- 	ADD		InvalidDistance
           053 : 383D;  -- 	JPOS	Section3_invalid	; Invalid value received
           054 : 0A2E;  -- 	LOAD	SonVal5
           055 : 1A3E;  -- 	ADD		TooFarAwayDistance
           056 : 303D;  -- 	JNEG	Section3_invalid
           057 : 0A4D;  -- 	LOAD	HalfMeter
           058 : 80D0;  -- 	CALL	MoveDistance
           059 : BFA6;  -- 	LOADI	-90
           05A : 80C1;  -- 	CALL	Turn
           05B : 286D;  -- 	JUMP	Die
           05C : 80A7;  -- 	CALL   GetThetaErr ; get the heading error
           05D : 80F8;  -- 	CALL   Abs         ; absolute value
           05E : 9806;  -- 	OUT    LCD         ; useful debug info
           05F : 6FFB;  -- 	ADDI   -5          ; check if within 5 degrees of target
           060 : 385C;  -- 	JPOS   Test1       ; if not, keep testing
           061 : 0A46;  -- 	LOAD   Mask5       ; defined below as 0b0100
           062 : 98B2;  -- 	OUT    SONAREN     ; enable sonar 2
           063 : 0A57;  -- 	LOAD   FMid       ; defined below as 100
           064 : 1079;  -- 	STORE  DVel
           065 : 90AD;  -- 	IN		DIST5
           066 : 9804;  -- 	OUT 	SSEG1
           067 : 6C6D;  -- 	ADDI	-915
           068 : B800;  -- 	LOADI  0
           069 : 1079;  -- 	STORE  DVel        ; turn in-place (zero velocity)
           06A : B90E;  -- 	LOADI  270         ; 270 is 90 to the right
           06B : 1078;  -- 	STORE  DTheta      ; desired heading
           06C : 286D;  -- 	JUMP Die
           06D : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           06E : 0A32;  -- 	LOAD   Zero        ; Stop everything.
           06F : 9883;  -- 	OUT    LVELCMD
           070 : 988B;  -- 	OUT    RVELCMD
           071 : 98B2;  -- 	OUT    SONAREN
           072 : 0875;  -- 	LOAD   DEAD        ; An indication that we are dead
           073 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           074 : 2874;  -- 	JUMP   Forever     ; Do this forever.
           075 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           076 : 807A;  -- 	CALL   ControlMovement
           077 : B000;  -- 	RETI   ; return from ISR
           078 : 0000;  -- DTheta:    DW 0
           079 : 0000;  -- DVel:      DW 0
           07A : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           07B : 10BA;  -- 	STORE  MaxVal
           07C : 80A7;  -- 	CALL   GetThetaErr ; get the heading error
           07D : 6002;  -- 	SHIFT  2
           07E : 10A4;  -- 	STORE  CMAErr      ; hold temporarily
           07F : 6002;  -- 	SHIFT  2           ; multiply by another 4
           080 : 80AE;  -- 	CALL   CapValue    ; get a +/- max of 50
           081 : 18A4;  -- 	ADD    CMAErr
           082 : 10A4;  -- 	STORE  CMAErr      ; now contains a desired differential
           083 : B9FE;  -- 	LOADI  510
           084 : 10BA;  -- 	STORE  MaxVal
           085 : 0879;  -- 	LOAD   DVel
           086 : 80AE;  -- 	CALL   CapValue    ; ensure velocity is valid
           087 : 1079;  -- 	STORE  DVel        ; overwrite any invalid input
           088 : 18A4;  -- 	ADD    CMAErr
           089 : 80AE;  -- 	CALL   CapValue    ; ensure velocity is valid
           08A : 10A6;  -- 	STORE  CMAR
           08B : 08A4;  -- 	LOAD   CMAErr
           08C : 80F9;  -- 	CALL   Neg         ; left wheel gets negative differential
           08D : 1879;  -- 	ADD    DVel
           08E : 80AE;  -- 	CALL   CapValue
           08F : 10A5;  -- 	STORE  CMAL
           090 : 08A4;  -- 	LOAD   CMAErr
           091 : 6001;  -- 	SHIFT  1           ; double the differential
           092 : 10A4;  -- 	STORE  CMAErr
           093 : 08A6;  -- 	LOAD   CMAR
           094 : 20A5;  -- 	SUB    CMAL        ; calculate the actual differential
           095 : 20A4;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           096 : 409F;  -- 	JZERO  CMADone
           097 : 10A4;  -- 	STORE  CMAErr      ; the missing part
           098 : 18A5;  -- 	ADD    CMAL
           099 : 80AE;  -- 	CALL   CapValue
           09A : 10A5;  -- 	STORE  CMAL
           09B : 08A6;  -- 	LOAD   CMAR
           09C : 20A4;  -- 	SUB    CMAErr
           09D : 80AE;  -- 	CALL   CapValue
           09E : 10A6;  -- 	STORE  CMAR
           09F : 08A5;  -- 	LOAD   CMAL
           0A0 : 9883;  -- 	OUT    LVELCMD
           0A1 : 08A6;  -- 	LOAD   CMAR
           0A2 : 988B;  -- 	OUT    RVELCMD
           0A3 : 8800;  -- 	RETURN
           0A4 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           0A5 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           0A6 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           0A7 : 90C2;  -- 	IN     THETA
           0A8 : 2078;  -- 	SUB    DTheta      ; actual - desired angle
           0A9 : 80F9;  -- 	CALL   Neg         ; desired - actual angle
           0AA : 68B4;  -- 	ADDI   180
           0AB : 80BB;  -- 	CALL   Mod360
           0AC : 6F4C;  -- 	ADDI   -180
           0AD : 8800;  -- 	RETURN
           0AE : 20BA;  -- 	SUB     MaxVal
           0AF : 38B5;  -- 	JPOS    CapVelHigh
           0B0 : 18BA;  -- 	ADD     MaxVal
           0B1 : 18BA;  -- 	ADD     MaxVal
           0B2 : 30B7;  -- 	JNEG    CapVelLow
           0B3 : 20BA;  -- 	SUB     MaxVal
           0B4 : 8800;  -- 	RETURN
           0B5 : 08BA;  -- 	LOAD    MaxVal
           0B6 : 8800;  -- 	RETURN
           0B7 : 08BA;  -- 	LOAD    MaxVal
           0B8 : 80F9;  -- 	CALL    Neg
           0B9 : 8800;  -- 	RETURN
           0BA : 01FE;  -- 	MaxVal: DW 510
           0BB : 30BE;  -- 	JNEG   M360N
           0BC : 6E98;  -- 	ADDI   -360
           0BD : 28BB;  -- 	JUMP   Mod360
           0BE : 6968;  -- 	ADDI   360
           0BF : 30BE;  -- 	JNEG   M360N
           0C0 : 8800;  -- 	RETURN
           0C1 : 1878;  -- 	ADD		DTheta
           0C2 : 80BB;  -- 	CALL	Mod360
           0C3 : 1078;  -- 	STORE	DTheta
           0C4 : 0879;  -- 	LOAD	DVel
           0C5 : 1230;  -- 	STORE	PVel
           0C6 : B832;  -- 	LOADI	50		; Set turning speed to 50
           0C7 : 1079;  -- 	STORE	DVel
           0C8 : 80A7;  -- 	CALL   GetThetaErr	; get the heading error
           0C9 : 80F8;  -- 	CALL   Abs			; absolute value
           0CA : 9805;  -- 	OUT	   SSEG2
           0CB : 6FFF;  -- 	ADDI   -1			; check if within x degrees of target
           0CC : 38C8;  -- 	JPOS   Turn_loop	; if not, keep checking
           0CD : 0A30;  -- 	LOAD	PVel
           0CE : 1079;  -- 	STORE	DVel
           0CF : 8800;  -- 	RETURN
           0D0 : 80F9;  -- 	CALL	Neg
           0D1 : 10D8;  -- 	STORE	MoveDistance_val	; Will now be negative
           0D2 : 80D9;  -- 	CALL	GetDistance
           0D3 : 9805;  -- 	OUT		SSEG2
           0D4 : 18D8;  -- 	ADD		MoveDistance_val
           0D5 : 30D2;  -- 	JNEG	MoveDistance_loop
           0D6 : 98C3;  -- 	OUT		RESETPOS
           0D7 : 8800;  -- 	RETURN
           0D8 : 0000;  -- 	MoveDistance_val: DW 0
           0D9 : 90C0;  -- 	IN		XPOS
           0DA : 11ED;  -- 	STORE	L2X
           0DB : 90C1;  -- 	IN		YPOS
           0DC : 11EE;  -- 	STORE	L2Y
           0DD : 81C3;  -- 	CALL	L2Estimate	; Get distance of hypotanuse
           0DE : 8800;  -- 	RETURN
           0DF : 0879;  -- 	LOAD	DVel
           0E0 : 80F9;  -- 	CALL	Neg
           0E1 : 1079;  -- 	STORE	DVel
           0E2 : 8800;  -- 	RETURN
           0E3 : 10F7;  -- 	STORE	CD_buffer	; Desired distance to wall (should be negative)
           0E4 : 0879;  -- 	LOAD	DVel
           0E5 : 1230;  -- 	STORE	PVel
           0E6 : B832;  -- 	LOADI	50	; Slow movement for measuring at
           0E7 : 1079;  -- 	STORE	DVel
           0E8 : 90A8;  -- 	IN		DIST0
           0E9 : 122D;  -- 	STORE	SonVal0
           0EA : 9804;  -- 	OUT 	SSEG1
           0EB : 18F7;  -- 	ADD		CD_buffer
           0EC : 80F8;  -- 	CALL	Abs
           0ED : 6832;  -- 	ADDI	50		; 5 cm threshold
           0EE : 38F2;  -- 	JPOS	CD_cont	; Within threshold
           0EF : 0A2D;  -- 	LOAD	SonVal0
           0F0 : 18F7;  -- 	ADD		CD_buffer
           0F1 : 80D0;  -- 	CALL MoveDistance
           0F2 : BFA6;  -- 	LOADI 	-90
           0F3 : 80C1;  -- 	CALL	Turn
           0F4 : 0A30;  -- 	LOAD PVel
           0F5 : 1079;  -- 	STORE DVel
           0F6 : 8800;  -- 	RETURN
           0F7 : 0000;  -- 	CD_buffer: DW 0
           0F8 : 38FB;  -- 	JPOS   Abs_r
           0F9 : 5A31;  -- 	XOR    NegOne       ; Flip all bits
           0FA : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0FB : 8800;  -- 	RETURN
           0FC : 095C;  -- 	LOAD   AtanY
           0FD : 80F8;  -- 	CALL   Abs          ; abs(y)
           0FE : 115E;  -- 	STORE  AtanT
           0FF : 095B;  -- 	LOAD   AtanX        ; abs(x)
           100 : 80F8;  -- 	CALL   Abs
           101 : 215E;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           102 : 310D;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           103 : 095B;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           104 : 310A;  -- 	JNEG   A2_R3
           105 : 811C;  -- 	CALL   A2_calc      ; Octants 1, 8
           106 : 3108;  -- 	JNEG   A2_R1n
           107 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           108 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           109 : 8800;  -- 	RETURN
           10A : 811C;  -- 	CALL   A2_calc      ; Octants 4, 5            
           10B : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           10C : 8800;  -- 	RETURN
           10D : 095C;  -- 	LOAD   AtanY        ; Swap input arguments
           10E : 115E;  -- 	STORE  AtanT
           10F : 095B;  -- 	LOAD   AtanX
           110 : 115C;  -- 	STORE  AtanY
           111 : 095E;  -- 	LOAD   AtanT
           112 : 115B;  -- 	STORE  AtanX
           113 : 3918;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           114 : 811C;  -- 	CALL   A2_calc      ; else octants 6, 7
           115 : 80F9;  -- 	CALL   Neg          ; Negatge the number
           116 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           117 : 8800;  -- 	RETURN
           118 : 811C;  -- 	CALL   A2_calc      ; Octants 2, 3
           119 : 80F9;  -- 	CALL   Neg          ; negate the angle
           11A : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           11B : 8800;  -- 	RETURN
           11C : 095C;  -- 	LOAD   AtanY
           11D : 11BB;  -- 	STORE  d16sN        ; Y in numerator
           11E : 095B;  -- 	LOAD   AtanX
           11F : 11BC;  -- 	STORE  d16sD        ; X in denominator
           120 : 8148;  -- 	CALL   A2_div       ; divide
           121 : 09C1;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           122 : 115D;  -- 	STORE  AtanRatio
           123 : 1184;  -- 	STORE  m16sA
           124 : 1185;  -- 	STORE  m16sB
           125 : 813F;  -- 	CALL   A2_mult      ; X^2
           126 : 1184;  -- 	STORE  m16sA
           127 : 095F;  -- 	LOAD   A2c
           128 : 1185;  -- 	STORE  m16sB
           129 : 813F;  -- 	CALL   A2_mult
           12A : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           12B : 11BC;  -- 	STORE  d16sD
           12C : 095D;  -- 	LOAD   AtanRatio
           12D : 11BB;  -- 	STORE  d16sN        ; Ratio in numerator
           12E : 8148;  -- 	CALL   A2_div       ; divide
           12F : 09C1;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           130 : 1184;  -- 	STORE  m16sA        ; <= result in radians
           131 : 0960;  -- 	LOAD   A2cd         ; degree conversion factor
           132 : 1185;  -- 	STORE  m16sB
           133 : 813F;  -- 	CALL   A2_mult      ; convert to degrees
           134 : 115E;  -- 	STORE  AtanT
           135 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           136 : 4A33;  -- 	AND    One
           137 : 413C;  -- 	JZERO  A2_rdwn      ; round down
           138 : 095E;  -- 	LOAD   AtanT
           139 : 6018;  -- 	SHIFT  -8
           13A : 6801;  -- 	ADDI   1            ; round up
           13B : 8800;  -- 	RETURN
           13C : 095E;  -- 	LOAD   AtanT
           13D : 6018;  -- 	SHIFT  -8           ; round down
           13E : 8800;  -- 	RETURN
           13F : 8161;  -- 	CALL   Mult16s
           140 : 0989;  -- 	LOAD   mres16sH
           141 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           142 : 1189;  -- 	STORE  mres16sH
           143 : 0988;  -- 	LOAD   mres16sL
           144 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           145 : 4A4A;  -- 	AND    LowByte
           146 : 5189;  -- 	OR     mres16sH     ; combine high and low words of result
           147 : 8800;  -- 	RETURN
           148 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           149 : 115E;  -- 	STORE  AtanT
           14A : 095E;  -- 	LOAD   AtanT
           14B : 6FFF;  -- 	ADDI   -1
           14C : 394F;  -- 	JPOS   A2_DN        ; not done; continue shifting
           14D : 818A;  -- 	CALL   Div16s       ; do the standard division
           14E : 8800;  -- 	RETURN
           14F : 115E;  -- 	STORE  AtanT
           150 : 09BB;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           151 : 6001;  -- 	SHIFT  1
           152 : 59BB;  -- 	XOR    d16sN        ; if the sign changed,
           153 : 3157;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           154 : 59BB;  -- 	XOR    d16sN        ; get back shifted version
           155 : 11BB;  -- 	STORE  d16sN
           156 : 294A;  -- 	JUMP   A2_DL
           157 : 09BC;  -- 	LOAD   d16sD
           158 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           159 : 11BC;  -- 	STORE  d16sD
           15A : 294A;  -- 	JUMP   A2_DL
           15B : 0000;  -- AtanX:      DW 0
           15C : 0000;  -- AtanY:      DW 0
           15D : 0000;  -- AtanRatio:  DW 0        ; =y/x
           15E : 0000;  -- AtanT:      DW 0        ; temporary value
           15F : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           160 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           161 : B800;  -- 	LOADI  0
           162 : 1186;  -- 	STORE  m16sc        ; clear carry
           163 : 1189;  -- 	STORE  mres16sH     ; clear result
           164 : B810;  -- 	LOADI  16           ; load 16 to counter
           165 : 1187;  -- 	STORE  mcnt16s      
           166 : 0986;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           167 : 416B;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           168 : 0989;  -- 	LOAD   mres16sH     ; if a carry, 
           169 : 1984;  -- 	ADD    m16sA        ;  add multiplicand to result H
           16A : 1189;  -- 	STORE  mres16sH
           16B : 0985;  -- 	LOAD   m16sB
           16C : 4A33;  -- 	AND    One          ; check bit 0 of multiplier
           16D : 1186;  -- 	STORE  m16sc        ; save as next carry
           16E : 4172;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           16F : 0989;  -- 	LOAD   mres16sH     ; if bit 0 set,
           170 : 2184;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           171 : 1189;  -- 	STORE  mres16sH
           172 : 0985;  -- 	LOAD   m16sB
           173 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           174 : 4983;  -- 	AND    c7FFF        ; clear msb
           175 : 1185;  -- 	STORE  m16sB
           176 : 0989;  -- 	LOAD   mres16sH     ; load result H
           177 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           178 : 5185;  -- 	OR     m16sB
           179 : 1185;  -- 	STORE  m16sB        ; result L now includes carry out from H
           17A : 0989;  -- 	LOAD   mres16sH
           17B : 6011;  -- 	SHIFT  -1
           17C : 1189;  -- 	STORE  mres16sH     ; shift result H >>1
           17D : 0987;  -- 	LOAD   mcnt16s
           17E : 6FFF;  -- 	ADDI   -1           ; check counter
           17F : 3965;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           180 : 0985;  -- 	LOAD   m16sB
           181 : 1188;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           182 : 8800;  -- 	RETURN              ; Done
           183 : 7FFF;  -- c7FFF: DW &H7FFF
           184 : 0000;  -- m16sA: DW 0 ; multiplicand
           185 : 0000;  -- m16sB: DW 0 ; multipler
           186 : 0000;  -- m16sc: DW 0 ; carry
           187 : 0000;  -- mcnt16s: DW 0 ; counter
           188 : 0000;  -- mres16sL: DW 0 ; result low
           189 : 0000;  -- mres16sH: DW 0 ; result high
           18A : B800;  -- 	LOADI  0
           18B : 11C2;  -- 	STORE  dres16sR     ; clear remainder result
           18C : 11BF;  -- 	STORE  d16sC1       ; clear carry
           18D : 09BB;  -- 	LOAD   d16sN
           18E : 59BC;  -- 	XOR    d16sD
           18F : 11BD;  -- 	STORE  d16sS        ; sign determination = N XOR D
           190 : B811;  -- 	LOADI  17
           191 : 11BE;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           192 : 09BC;  -- 	LOAD   d16sD
           193 : 80F8;  -- 	CALL   Abs          ; take absolute value of denominator
           194 : 11BC;  -- 	STORE  d16sD
           195 : 09BB;  -- 	LOAD   d16sN
           196 : 80F8;  -- 	CALL   Abs          ; take absolute value of numerator
           197 : 11BB;  -- 	STORE  d16sN
           198 : 09BB;  -- 	LOAD   d16sN
           199 : 601F;  -- 	SHIFT  -15          ; get msb
           19A : 4A33;  -- 	AND    One          ; only msb (because shift is arithmetic)
           19B : 11C0;  -- 	STORE  d16sC2       ; store as carry
           19C : 09BB;  -- 	LOAD   d16sN
           19D : 6001;  -- 	SHIFT  1            ; shift <<1
           19E : 51BF;  -- 	OR     d16sC1       ; with carry
           19F : 11BB;  -- 	STORE  d16sN
           1A0 : 09BE;  -- 	LOAD   d16sT
           1A1 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1A2 : 41B2;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1A3 : 11BE;  -- 	STORE  d16sT
           1A4 : 09C2;  -- 	LOAD   dres16sR
           1A5 : 6001;  -- 	SHIFT  1            ; shift remainder
           1A6 : 51C0;  -- 	OR     d16sC2       ; with carry from other shift
           1A7 : 21BC;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1A8 : 31AD;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1A9 : 11C2;  -- 	STORE  dres16sR
           1AA : B801;  -- 	LOADI  1
           1AB : 11BF;  -- 	STORE  d16sC1       ; set carry
           1AC : 2998;  -- 	JUMP   Div16s_loop
           1AD : 19BC;  -- 	ADD    d16sD        ; add denominator back in
           1AE : 11C2;  -- 	STORE  dres16sR
           1AF : B800;  -- 	LOADI  0
           1B0 : 11BF;  -- 	STORE  d16sC1       ; clear carry
           1B1 : 2998;  -- 	JUMP   Div16s_loop
           1B2 : 09BB;  -- 	LOAD   d16sN
           1B3 : 11C1;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1B4 : 09BD;  -- 	LOAD   d16sS        ; check the sign indicator
           1B5 : 31B7;  -- 	JNEG   Div16s_neg
           1B6 : 8800;  -- 	RETURN
           1B7 : 09C1;  -- 	LOAD   dres16sQ     ; need to negate the result
           1B8 : 80F9;  -- 	CALL   Neg
           1B9 : 11C1;  -- 	STORE  dres16sQ
           1BA : 8800;  -- 	RETURN	
           1BB : 0000;  -- d16sN: DW 0 ; numerator
           1BC : 0000;  -- d16sD: DW 0 ; denominator
           1BD : 0000;  -- d16sS: DW 0 ; sign value
           1BE : 0000;  -- d16sT: DW 0 ; temp counter
           1BF : 0000;  -- d16sC1: DW 0 ; carry value
           1C0 : 0000;  -- d16sC2: DW 0 ; carry value
           1C1 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1C2 : 0000;  -- dres16sR: DW 0 ; remainder result
           1C3 : 09ED;  -- 	LOAD   L2X
           1C4 : 80F8;  -- 	CALL   Abs
           1C5 : 11EF;  -- 	STORE  L2T1
           1C6 : 09EE;  -- 	LOAD   L2Y
           1C7 : 80F8;  -- 	CALL   Abs
           1C8 : 21EF;  -- 	SUB    L2T1
           1C9 : 31E5;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1CA : 19EF;  -- 	ADD    L2T1
           1CB : 1184;  -- 	STORE  m16sa
           1CC : B8F6;  -- 	LOADI  246       ; max * 246
           1CD : 1185;  -- 	STORE  m16sB
           1CE : 8161;  -- 	CALL   Mult16s
           1CF : 0989;  -- 	LOAD   mres16sH
           1D0 : 6008;  -- 	SHIFT  8
           1D1 : 11F0;  -- 	STORE  L2T2
           1D2 : 0988;  -- 	LOAD   mres16sL
           1D3 : 6018;  -- 	SHIFT  -8        ; / 256
           1D4 : 4A4A;  -- 	AND    LowByte
           1D5 : 51F0;  -- 	OR     L2T2
           1D6 : 11F1;  -- 	STORE  L2T3
           1D7 : 09EF;  -- 	LOAD   L2T1
           1D8 : 1184;  -- 	STORE  m16sa
           1D9 : B868;  -- 	LOADI  104       ; min * 104
           1DA : 1185;  -- 	STORE  m16sB
           1DB : 8161;  -- 	CALL   Mult16s
           1DC : 0989;  -- 	LOAD   mres16sH
           1DD : 6008;  -- 	SHIFT  8
           1DE : 11F0;  -- 	STORE  L2T2
           1DF : 0988;  -- 	LOAD   mres16sL
           1E0 : 6018;  -- 	SHIFT  -8        ; / 256
           1E1 : 4A4A;  -- 	AND    LowByte
           1E2 : 51F0;  -- 	OR     L2T2
           1E3 : 19F1;  -- 	ADD    L2T3     ; sum
           1E4 : 8800;  -- 	RETURN
           1E5 : 19EF;  -- 	ADD    L2T1
           1E6 : 11F0;  -- 	STORE  L2T2
           1E7 : 09EF;  -- 	LOAD   L2T1
           1E8 : 11F1;  -- 	STORE  L2T3
           1E9 : 09F0;  -- 	LOAD   L2T2
           1EA : 11EF;  -- 	STORE  L2T1
           1EB : 09F1;  -- 	LOAD   L2T3
           1EC : 29CB;  -- 	JUMP   CalcDist
           1ED : 0000;  -- L2X:  DW 0
           1EE : 0000;  -- L2Y:  DW 0
           1EF : 0000;  -- L2T1: DW 0
           1F0 : 0000;  -- L2T2: DW 0
           1F1 : 0000;  -- L2T3: DW 0
           1F2 : 9802;  -- 	OUT    TIMER
           1F3 : 9002;  -- 	IN     TIMER
           1F4 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1F5 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1F6 : 31F3;  -- 	JNEG   Wloop
           1F7 : 8800;  -- 	RETURN
           1F8 : 8210;  -- 	CALL   GetBattLvl
           1F9 : 41F8;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1FA : 225B;  -- 	SUB    MinBatt
           1FB : 31FE;  -- 	JNEG   DeadBatt
           1FC : 1A5B;  -- 	ADD    MinBatt     ; get original value back
           1FD : 8800;  -- 	RETURN
           1FE : B820;  -- 	LOADI  &H20
           1FF : 980A;  -- 	OUT    BEEP        ; start beep sound
           200 : 8210;  -- 	CALL   GetBattLvl  ; get the battery level
           201 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           202 : 9805;  -- 	OUT    SSEG2
           203 : 9806;  -- 	OUT    LCD
           204 : 0A32;  -- 	LOAD   Zero
           205 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           206 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           207 : 9807;  -- 	OUT    XLEDS
           208 : 81F2;  -- 	CALL   Wait1       ; 1 second
           209 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           20A : 980A;  -- 	OUT    BEEP        ; stop beeping
           20B : 0A32;  -- 	LOAD   Zero
           20C : 9801;  -- 	OUT    LEDS        ; LEDs off
           20D : 9807;  -- 	OUT    XLEDS
           20E : 81F2;  -- 	CALL   Wait1       ; 1 second
           20F : 29FE;  -- 	JUMP   DeadBatt    ; repeat forever
           210 : 0A5D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           211 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           212 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           213 : 821E;  -- 	CALL   BlockI2C    ; wait for it to finish
           214 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           215 : 8800;  -- 	RETURN
           216 : 821E;  -- 	CALL   BlockI2C    ; wait for idle
           217 : 0A5C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           218 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           219 : 0A32;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           21A : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           21B : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           21C : 821E;  -- 	CALL   BlockI2C    ; wait for it to finish
           21D : 8800;  -- 	RETURN
           21E : 0A32;  -- 	LOAD   Zero
           21F : 122C;  -- 	STORE  Temp        ; Used to check for timeout
           220 : 0A2C;  -- 	LOAD   Temp
           221 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           222 : 122C;  -- 	STORE  Temp
           223 : 4227;  -- 	JZERO  I2CError    ; Timeout occurred; error
           224 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           225 : 3A20;  -- 	JPOS   BI2CL       ; If not 0, try again
           226 : 8800;  -- 	RETURN             ; Else return
           227 : 0A32;  -- 	LOAD   Zero
           228 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           229 : 9804;  -- 	OUT    SSEG1
           22A : 9805;  -- 	OUT    SSEG2       ; display error message
           22B : 2A27;  -- 	JUMP   I2CError
           22C : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           22D : 0000;  -- SonVal0:	DW 0
           22E : 0000;  -- SonVal5:	DW 0
           22F : 0000;  -- ExceedCount: DW 0
           230 : 0000;  -- PVel:		DW 0 ; Previous velocity
           231 : FFFF;  -- NegOne:   DW -1
           232 : 0000;  -- Zero:     DW 0
           233 : 0001;  -- One:      DW 1
           234 : 0002;  -- Two:      DW 2
           235 : 0003;  -- Three:    DW 3
           236 : 0004;  -- Four:     DW 4
           237 : 0005;  -- Five:     DW 5
           238 : 0006;  -- Six:      DW 6
           239 : 0007;  -- Seven:    DW 7
           23A : 0008;  -- Eight:    DW 8
           23B : 0009;  -- Nine:     DW 9
           23C : 000A;  -- Ten:      DW 10
           23D : F000;  -- InvalidDistance: 	DW -4096
           23E : FA00;  -- TooFarAwayDistance:	DW -1536 ; -0x500
           23F : FD00;  -- Sect3WallDistance:	DW -768	; -0x300
           240 : 00C8;  -- ReevalDistance:		DW	200	; ~200mm
           241 : 0001;  -- Mask0:    DW &B00000001
           242 : 0002;  -- Mask1:    DW &B00000010
           243 : 0004;  -- Mask2:    DW &B00000100
           244 : 0008;  -- Mask3:    DW &B00001000
           245 : 0010;  -- Mask4:    DW &B00010000
           246 : 0020;  -- Mask5:    DW &B00100000
           247 : 0021;  -- Mask50:	  DW &B00100001 ; Mask0 OR Mask5
           248 : 0040;  -- Mask6:    DW &B01000000
           249 : 0080;  -- Mask7:    DW &B10000000
           24A : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           24B : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           24C : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           24D : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           24E : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           24F : 036F;  -- Ft3:      DW 879
           250 : 0494;  -- Ft4:      DW 1172
           251 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           252 : 00B4;  -- Deg180:   DW 180       ; 180
           253 : 010E;  -- Deg270:   DW 270       ; 270
           254 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           255 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           256 : FF9C;  -- RSlow:    DW -100
           257 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           258 : FEA2;  -- RMid:     DW -350
           259 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           25A : FE0C;  -- RFast:    DW -500
           25B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           25C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           25D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
