-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 289A;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A26;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 109D;  -- 	STORE  DVel        ; Reset API variables
           009 : 109C;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8209;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 81EB;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A3A;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A37;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A37;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 121F;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 521F;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A38;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A26;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           024 : B800;  -- 	LOADI  0
           025 : 109D;  -- 	STORE  DVel        ; zero desired forward velocity
           026 : 109C;  -- 	STORE  DTheta      ; desired heading = 0 degrees
           027 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           028 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           029 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02A : 0A3C;  -- 	LOAD 	Mask50
           02B : 98B2;  -- 	OUT		SONAREN	; Enable sonars 0 and 5 (180 degrees apart)
           02C : B9F4;  -- 	LOADI	500
           02D : 109D;  -- 	STORE	DVel
           02E : 0A46;  -- 	LOAD	Ft4
           02F : 807D;  -- 	CALL	MoveDistance
           030 : 90AD;  -- 	IN		DIST5
           031 : 1221;  -- 	STORE	SonVal5
           032 : 9804;  -- 	OUT 	SSEG1
           033 : 0A21;  -- 	LOAD	SonVal5
           034 : 2232;  -- 	SUB		TooFarAwayDistance
           035 : 3030;  -- 	JNEG	Section1 ; Haven't reached end of obstacle yet
           036 : 0A35;  -- 	LOAD	HalfSecBeep
           037 : 980A;  -- 	OUT		BEEP
           038 : 0A47;  -- 	LOAD	Ft5
           039 : 807D;  -- 	CALL	MoveDistance
           03A : BFA6;  -- 	LOADI	-90
           03B : 806E;  -- 	CALL	Turn
           03C : 0A47;  -- 	LOAD	Ft5
           03D : 807D;  -- 	CALL	MoveDistance
           03E : BFA6;  -- 	LOADI	-90
           03F : 806E;  -- 	CALL	Turn
           040 : 0A46;  -- 	LOAD	Ft4
           041 : 807D;  -- 	CALL	MoveDistance
           042 : 81E5;  -- 	CALL	WaitABit
           043 : 90AD;  -- 	IN		DIST5
           044 : 1221;  -- 	STORE	SonVal5
           045 : 9804;  -- 	OUT 	SSEG1
           046 : 90A8;  -- 	IN		DIST0
           047 : 1220;  -- 	STORE	SonVal0
           048 : 9805;  -- 	OUT 	SSEG2
           049 : 0A21;  -- 	LOAD	SonVal5
           04A : 2231;  -- 	SUB		InvalidDistance
           04B : 3842;  -- 	JPOS	Section3_invalid	; Invalid value received
           04C : 0A21;  -- 	LOAD	SonVal5
           04D : 2232;  -- 	SUB		TooFarAwayDistance
           04E : 3867;  -- 	JPOS	Section3_cont	; Haven't reached end of obstacle yet
           04F : 0A20;  -- 	LOAD	SonVal0
           050 : 2221;  -- 	SUB		SonVal5
           051 : 1224;  -- 	STORE	WallDiff
           052 : 0A24;  -- 	LOAD	WallDiff
           053 : 1F06;  -- 	ADD		-250
           054 : 3859;  -- 	JPOS	Section3_far
           055 : 0A24;  -- 	LOAD	WallDiff
           056 : 18FA;  -- 	ADD		250
           057 : 3060;  -- 	JNEG	Section3_close
           058 : 2867;  -- 	JUMP	Section3_cont
           059 : B81E;  -- 	LOADI	30
           05A : 806E;  -- 	CALL	Turn
           05B : 0A34;  -- 	LOAD	ReevalDistance
           05C : 807D;  -- 	CALL	MoveDistance
           05D : BFE2;  -- 	LOADI	-30
           05E : 806E;  -- 	CALL	Turn
           05F : 2842;  -- 	JUMP	Section3_invalid
           060 : BFE2;  -- 	LOADI	-30
           061 : 806E;  -- 	CALL	Turn
           062 : 0A34;  -- 	LOAD	ReevalDistance
           063 : 807D;  -- 	CALL	MoveDistance
           064 : B81E;  -- 	LOADI	30
           065 : 806E;  -- 	CALL	Turn
           066 : 2842;  -- 	JUMP	Section3_invalid
           067 : 0A43;  -- 	LOAD	Ft1
           068 : 807D;  -- 	CALL	MoveDistance
           069 : BFA6;  -- 	LOADI	-90
           06A : 806E;  -- 	CALL	Turn
           06B : 0A48;  -- 	LOAD	Ft6
           06C : 807D;  -- 	CALL	MoveDistance
           06D : 2830;  -- 	JUMP	Section1
           06E : 98C3;  -- 	OUT		RESETPOS	
           06F : 109C;  -- 	STORE	DTheta
           070 : 9805;  -- 	OUT		SSEG2
           071 : 089D;  -- 	LOAD	DVel
           072 : 1223;  -- 	STORE	PVel
           073 : B832;  -- 	LOADI	50		; Set turning speed to 50
           074 : 109D;  -- 	STORE	DVel
           075 : 80CB;  -- 	CALL   GetThetaErr	; get the heading error
           076 : 80E5;  -- 	CALL   Abs			; absolute value
           077 : 9805;  -- 	OUT	   SSEG2
           078 : 6FFF;  -- 	ADDI   -1			; check if within x degrees of target
           079 : 3875;  -- 	JPOS   Turn_loop	; if not, keep checking
           07A : 0A23;  -- 	LOAD	PVel
           07B : 109D;  -- 	STORE	DVel
           07C : 8800;  -- 	RETURN
           07D : 80E6;  -- 	CALL	Neg
           07E : 1084;  -- 	STORE	MoveDistance_val	; Will now be negative
           07F : 8085;  -- 	CALL	GetDistance
           080 : 1884;  -- 	ADD		MoveDistance_val
           081 : 307F;  -- 	JNEG	MoveDistance_loop
           082 : 98C3;  -- 	OUT		RESETPOS
           083 : 8800;  -- 	RETURN
           084 : 0000;  -- 	MoveDistance_val: DW 0
           085 : 90C0;  -- 	IN		XPOS
           086 : 9804;  -- 	OUT		SSEG1
           087 : 11DA;  -- 	STORE	L2X
           088 : 90C1;  -- 	IN		YPOS
           089 : 9805;  -- 	OUT		SSEG2
           08A : 11DB;  -- 	STORE	L2Y
           08B : 81B0;  -- 	CALL	L2Estimate	; Get distance of hypotanuse
           08C : 8800;  -- 	RETURN
           08D : 089D;  -- 	LOAD	DVel
           08E : 80E6;  -- 	CALL	Neg
           08F : 109D;  -- 	STORE	DVel
           090 : 8800;  -- 	RETURN
           091 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           092 : 0A26;  -- 	LOAD   Zero        ; Stop everything.
           093 : 9883;  -- 	OUT    LVELCMD
           094 : 988B;  -- 	OUT    RVELCMD
           095 : 98B2;  -- 	OUT    SONAREN
           096 : 0899;  -- 	LOAD   DEAD        ; An indication that we are dead
           097 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           098 : 2898;  -- 	JUMP   Forever     ; Do this forever.
           099 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           09A : 809E;  -- 	CALL   ControlMovement
           09B : B000;  -- 	RETI   ; return from ISR
           09C : 0000;  -- DTheta:    DW 0
           09D : 0000;  -- DVel:      DW 0
           09E : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           09F : 10DE;  -- 	STORE  MaxVal
           0A0 : 80CB;  -- 	CALL   GetThetaErr ; get the heading error
           0A1 : 6002;  -- 	SHIFT  2
           0A2 : 10C8;  -- 	STORE  CMAErr      ; hold temporarily
           0A3 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0A4 : 80D2;  -- 	CALL   CapValue    ; get a +/- max of 50
           0A5 : 18C8;  -- 	ADD    CMAErr
           0A6 : 10C8;  -- 	STORE  CMAErr      ; now contains a desired differential
           0A7 : B9FE;  -- 	LOADI  510
           0A8 : 10DE;  -- 	STORE  MaxVal
           0A9 : 089D;  -- 	LOAD   DVel
           0AA : 80D2;  -- 	CALL   CapValue    ; ensure velocity is valid
           0AB : 109D;  -- 	STORE  DVel        ; overwrite any invalid input
           0AC : 18C8;  -- 	ADD    CMAErr
           0AD : 80D2;  -- 	CALL   CapValue    ; ensure velocity is valid
           0AE : 10CA;  -- 	STORE  CMAR
           0AF : 08C8;  -- 	LOAD   CMAErr
           0B0 : 80E6;  -- 	CALL   Neg         ; left wheel gets negative differential
           0B1 : 189D;  -- 	ADD    DVel
           0B2 : 80D2;  -- 	CALL   CapValue
           0B3 : 10C9;  -- 	STORE  CMAL
           0B4 : 08C8;  -- 	LOAD   CMAErr
           0B5 : 6001;  -- 	SHIFT  1           ; double the differential
           0B6 : 10C8;  -- 	STORE  CMAErr
           0B7 : 08CA;  -- 	LOAD   CMAR
           0B8 : 20C9;  -- 	SUB    CMAL        ; calculate the actual differential
           0B9 : 20C8;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0BA : 40C3;  -- 	JZERO  CMADone
           0BB : 10C8;  -- 	STORE  CMAErr      ; the missing part
           0BC : 18C9;  -- 	ADD    CMAL
           0BD : 80D2;  -- 	CALL   CapValue
           0BE : 10C9;  -- 	STORE  CMAL
           0BF : 08CA;  -- 	LOAD   CMAR
           0C0 : 20C8;  -- 	SUB    CMAErr
           0C1 : 80D2;  -- 	CALL   CapValue
           0C2 : 10CA;  -- 	STORE  CMAR
           0C3 : 08C9;  -- 	LOAD   CMAL
           0C4 : 9883;  -- 	OUT    LVELCMD
           0C5 : 08CA;  -- 	LOAD   CMAR
           0C6 : 988B;  -- 	OUT    RVELCMD
           0C7 : 8800;  -- 	RETURN
           0C8 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           0C9 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           0CA : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           0CB : 90C2;  -- 	IN     THETA
           0CC : 209C;  -- 	SUB    DTheta      ; actual - desired angle
           0CD : 80E6;  -- 	CALL   Neg         ; desired - actual angle
           0CE : 68B4;  -- 	ADDI   180
           0CF : 80DF;  -- 	CALL   Mod360
           0D0 : 6F4C;  -- 	ADDI   -180
           0D1 : 8800;  -- 	RETURN
           0D2 : 20DE;  -- 	SUB     MaxVal
           0D3 : 38D9;  -- 	JPOS    CapVelHigh
           0D4 : 18DE;  -- 	ADD     MaxVal
           0D5 : 18DE;  -- 	ADD     MaxVal
           0D6 : 30DB;  -- 	JNEG    CapVelLow
           0D7 : 20DE;  -- 	SUB     MaxVal
           0D8 : 8800;  -- 	RETURN
           0D9 : 08DE;  -- 	LOAD    MaxVal
           0DA : 8800;  -- 	RETURN
           0DB : 08DE;  -- 	LOAD    MaxVal
           0DC : 80E6;  -- 	CALL    Neg
           0DD : 8800;  -- 	RETURN
           0DE : 01FE;  -- 	MaxVal: DW 510
           0DF : 30E2;  -- 	JNEG   M360N
           0E0 : 6E98;  -- 	ADDI   -360
           0E1 : 28DF;  -- 	JUMP   Mod360
           0E2 : 6968;  -- 	ADDI   360
           0E3 : 30E2;  -- 	JNEG   M360N
           0E4 : 8800;  -- 	RETURN
           0E5 : 38E8;  -- 	JPOS   Abs_r
           0E6 : 5A25;  -- 	XOR    NegOne       ; Flip all bits
           0E7 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0E8 : 8800;  -- 	RETURN
           0E9 : 0949;  -- 	LOAD   AtanY
           0EA : 80E5;  -- 	CALL   Abs          ; abs(y)
           0EB : 114B;  -- 	STORE  AtanT
           0EC : 0948;  -- 	LOAD   AtanX        ; abs(x)
           0ED : 80E5;  -- 	CALL   Abs
           0EE : 214B;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0EF : 30FA;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0F0 : 0948;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0F1 : 30F7;  -- 	JNEG   A2_R3
           0F2 : 8109;  -- 	CALL   A2_calc      ; Octants 1, 8
           0F3 : 30F5;  -- 	JNEG   A2_R1n
           0F4 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0F5 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0F6 : 8800;  -- 	RETURN
           0F7 : 8109;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0F8 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0F9 : 8800;  -- 	RETURN
           0FA : 0949;  -- 	LOAD   AtanY        ; Swap input arguments
           0FB : 114B;  -- 	STORE  AtanT
           0FC : 0948;  -- 	LOAD   AtanX
           0FD : 1149;  -- 	STORE  AtanY
           0FE : 094B;  -- 	LOAD   AtanT
           0FF : 1148;  -- 	STORE  AtanX
           100 : 3905;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           101 : 8109;  -- 	CALL   A2_calc      ; else octants 6, 7
           102 : 80E6;  -- 	CALL   Neg          ; Negatge the number
           103 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           104 : 8800;  -- 	RETURN
           105 : 8109;  -- 	CALL   A2_calc      ; Octants 2, 3
           106 : 80E6;  -- 	CALL   Neg          ; negate the angle
           107 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           108 : 8800;  -- 	RETURN
           109 : 0949;  -- 	LOAD   AtanY
           10A : 11A8;  -- 	STORE  d16sN        ; Y in numerator
           10B : 0948;  -- 	LOAD   AtanX
           10C : 11A9;  -- 	STORE  d16sD        ; X in denominator
           10D : 8135;  -- 	CALL   A2_div       ; divide
           10E : 09AE;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           10F : 114A;  -- 	STORE  AtanRatio
           110 : 1171;  -- 	STORE  m16sA
           111 : 1172;  -- 	STORE  m16sB
           112 : 812C;  -- 	CALL   A2_mult      ; X^2
           113 : 1171;  -- 	STORE  m16sA
           114 : 094C;  -- 	LOAD   A2c
           115 : 1172;  -- 	STORE  m16sB
           116 : 812C;  -- 	CALL   A2_mult
           117 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           118 : 11A9;  -- 	STORE  d16sD
           119 : 094A;  -- 	LOAD   AtanRatio
           11A : 11A8;  -- 	STORE  d16sN        ; Ratio in numerator
           11B : 8135;  -- 	CALL   A2_div       ; divide
           11C : 09AE;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           11D : 1171;  -- 	STORE  m16sA        ; <= result in radians
           11E : 094D;  -- 	LOAD   A2cd         ; degree conversion factor
           11F : 1172;  -- 	STORE  m16sB
           120 : 812C;  -- 	CALL   A2_mult      ; convert to degrees
           121 : 114B;  -- 	STORE  AtanT
           122 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           123 : 4A27;  -- 	AND    One
           124 : 4129;  -- 	JZERO  A2_rdwn      ; round down
           125 : 094B;  -- 	LOAD   AtanT
           126 : 6018;  -- 	SHIFT  -8
           127 : 6801;  -- 	ADDI   1            ; round up
           128 : 8800;  -- 	RETURN
           129 : 094B;  -- 	LOAD   AtanT
           12A : 6018;  -- 	SHIFT  -8           ; round down
           12B : 8800;  -- 	RETURN
           12C : 814E;  -- 	CALL   Mult16s
           12D : 0976;  -- 	LOAD   mres16sH
           12E : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           12F : 1176;  -- 	STORE  mres16sH
           130 : 0975;  -- 	LOAD   mres16sL
           131 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           132 : 4A3F;  -- 	AND    LowByte
           133 : 5176;  -- 	OR     mres16sH     ; combine high and low words of result
           134 : 8800;  -- 	RETURN
           135 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           136 : 114B;  -- 	STORE  AtanT
           137 : 094B;  -- 	LOAD   AtanT
           138 : 6FFF;  -- 	ADDI   -1
           139 : 393C;  -- 	JPOS   A2_DN        ; not done; continue shifting
           13A : 8177;  -- 	CALL   Div16s       ; do the standard division
           13B : 8800;  -- 	RETURN
           13C : 114B;  -- 	STORE  AtanT
           13D : 09A8;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           13E : 6001;  -- 	SHIFT  1
           13F : 59A8;  -- 	XOR    d16sN        ; if the sign changed,
           140 : 3144;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           141 : 59A8;  -- 	XOR    d16sN        ; get back shifted version
           142 : 11A8;  -- 	STORE  d16sN
           143 : 2937;  -- 	JUMP   A2_DL
           144 : 09A9;  -- 	LOAD   d16sD
           145 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           146 : 11A9;  -- 	STORE  d16sD
           147 : 2937;  -- 	JUMP   A2_DL
           148 : 0000;  -- AtanX:      DW 0
           149 : 0000;  -- AtanY:      DW 0
           14A : 0000;  -- AtanRatio:  DW 0        ; =y/x
           14B : 0000;  -- AtanT:      DW 0        ; temporary value
           14C : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           14D : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           14E : B800;  -- 	LOADI  0
           14F : 1173;  -- 	STORE  m16sc        ; clear carry
           150 : 1176;  -- 	STORE  mres16sH     ; clear result
           151 : B810;  -- 	LOADI  16           ; load 16 to counter
           152 : 1174;  -- 	STORE  mcnt16s      
           153 : 0973;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           154 : 4158;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           155 : 0976;  -- 	LOAD   mres16sH     ; if a carry, 
           156 : 1971;  -- 	ADD    m16sA        ;  add multiplicand to result H
           157 : 1176;  -- 	STORE  mres16sH
           158 : 0972;  -- 	LOAD   m16sB
           159 : 4A27;  -- 	AND    One          ; check bit 0 of multiplier
           15A : 1173;  -- 	STORE  m16sc        ; save as next carry
           15B : 415F;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           15C : 0976;  -- 	LOAD   mres16sH     ; if bit 0 set,
           15D : 2171;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           15E : 1176;  -- 	STORE  mres16sH
           15F : 0972;  -- 	LOAD   m16sB
           160 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           161 : 4970;  -- 	AND    c7FFF        ; clear msb
           162 : 1172;  -- 	STORE  m16sB
           163 : 0976;  -- 	LOAD   mres16sH     ; load result H
           164 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           165 : 5172;  -- 	OR     m16sB
           166 : 1172;  -- 	STORE  m16sB        ; result L now includes carry out from H
           167 : 0976;  -- 	LOAD   mres16sH
           168 : 6011;  -- 	SHIFT  -1
           169 : 1176;  -- 	STORE  mres16sH     ; shift result H >>1
           16A : 0974;  -- 	LOAD   mcnt16s
           16B : 6FFF;  -- 	ADDI   -1           ; check counter
           16C : 3952;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           16D : 0972;  -- 	LOAD   m16sB
           16E : 1175;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           16F : 8800;  -- 	RETURN              ; Done
           170 : 7FFF;  -- c7FFF: DW &H7FFF
           171 : 0000;  -- m16sA: DW 0 ; multiplicand
           172 : 0000;  -- m16sB: DW 0 ; multipler
           173 : 0000;  -- m16sc: DW 0 ; carry
           174 : 0000;  -- mcnt16s: DW 0 ; counter
           175 : 0000;  -- mres16sL: DW 0 ; result low
           176 : 0000;  -- mres16sH: DW 0 ; result high
           177 : B800;  -- 	LOADI  0
           178 : 11AF;  -- 	STORE  dres16sR     ; clear remainder result
           179 : 11AC;  -- 	STORE  d16sC1       ; clear carry
           17A : 09A8;  -- 	LOAD   d16sN
           17B : 59A9;  -- 	XOR    d16sD
           17C : 11AA;  -- 	STORE  d16sS        ; sign determination = N XOR D
           17D : B811;  -- 	LOADI  17
           17E : 11AB;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           17F : 09A9;  -- 	LOAD   d16sD
           180 : 80E5;  -- 	CALL   Abs          ; take absolute value of denominator
           181 : 11A9;  -- 	STORE  d16sD
           182 : 09A8;  -- 	LOAD   d16sN
           183 : 80E5;  -- 	CALL   Abs          ; take absolute value of numerator
           184 : 11A8;  -- 	STORE  d16sN
           185 : 09A8;  -- 	LOAD   d16sN
           186 : 601F;  -- 	SHIFT  -15          ; get msb
           187 : 4A27;  -- 	AND    One          ; only msb (because shift is arithmetic)
           188 : 11AD;  -- 	STORE  d16sC2       ; store as carry
           189 : 09A8;  -- 	LOAD   d16sN
           18A : 6001;  -- 	SHIFT  1            ; shift <<1
           18B : 51AC;  -- 	OR     d16sC1       ; with carry
           18C : 11A8;  -- 	STORE  d16sN
           18D : 09AB;  -- 	LOAD   d16sT
           18E : 6FFF;  -- 	ADDI   -1           ; decrement counter
           18F : 419F;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           190 : 11AB;  -- 	STORE  d16sT
           191 : 09AF;  -- 	LOAD   dres16sR
           192 : 6001;  -- 	SHIFT  1            ; shift remainder
           193 : 51AD;  -- 	OR     d16sC2       ; with carry from other shift
           194 : 21A9;  -- 	SUB    d16sD        ; subtract denominator from remainder
           195 : 319A;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           196 : 11AF;  -- 	STORE  dres16sR
           197 : B801;  -- 	LOADI  1
           198 : 11AC;  -- 	STORE  d16sC1       ; set carry
           199 : 2985;  -- 	JUMP   Div16s_loop
           19A : 19A9;  -- 	ADD    d16sD        ; add denominator back in
           19B : 11AF;  -- 	STORE  dres16sR
           19C : B800;  -- 	LOADI  0
           19D : 11AC;  -- 	STORE  d16sC1       ; clear carry
           19E : 2985;  -- 	JUMP   Div16s_loop
           19F : 09A8;  -- 	LOAD   d16sN
           1A0 : 11AE;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1A1 : 09AA;  -- 	LOAD   d16sS        ; check the sign indicator
           1A2 : 31A4;  -- 	JNEG   Div16s_neg
           1A3 : 8800;  -- 	RETURN
           1A4 : 09AE;  -- 	LOAD   dres16sQ     ; need to negate the result
           1A5 : 80E6;  -- 	CALL   Neg
           1A6 : 11AE;  -- 	STORE  dres16sQ
           1A7 : 8800;  -- 	RETURN	
           1A8 : 0000;  -- d16sN: DW 0 ; numerator
           1A9 : 0000;  -- d16sD: DW 0 ; denominator
           1AA : 0000;  -- d16sS: DW 0 ; sign value
           1AB : 0000;  -- d16sT: DW 0 ; temp counter
           1AC : 0000;  -- d16sC1: DW 0 ; carry value
           1AD : 0000;  -- d16sC2: DW 0 ; carry value
           1AE : 0000;  -- dres16sQ: DW 0 ; quotient result
           1AF : 0000;  -- dres16sR: DW 0 ; remainder result
           1B0 : 09DA;  -- 	LOAD   L2X
           1B1 : 80E5;  -- 	CALL   Abs
           1B2 : 11DC;  -- 	STORE  L2T1
           1B3 : 09DB;  -- 	LOAD   L2Y
           1B4 : 80E5;  -- 	CALL   Abs
           1B5 : 21DC;  -- 	SUB    L2T1
           1B6 : 31D2;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1B7 : 19DC;  -- 	ADD    L2T1
           1B8 : 1171;  -- 	STORE  m16sa
           1B9 : B8F6;  -- 	LOADI  246       ; max * 246
           1BA : 1172;  -- 	STORE  m16sB
           1BB : 814E;  -- 	CALL   Mult16s
           1BC : 0976;  -- 	LOAD   mres16sH
           1BD : 6008;  -- 	SHIFT  8
           1BE : 11DD;  -- 	STORE  L2T2
           1BF : 0975;  -- 	LOAD   mres16sL
           1C0 : 6018;  -- 	SHIFT  -8        ; / 256
           1C1 : 4A3F;  -- 	AND    LowByte
           1C2 : 51DD;  -- 	OR     L2T2
           1C3 : 11DE;  -- 	STORE  L2T3
           1C4 : 09DC;  -- 	LOAD   L2T1
           1C5 : 1171;  -- 	STORE  m16sa
           1C6 : B868;  -- 	LOADI  104       ; min * 104
           1C7 : 1172;  -- 	STORE  m16sB
           1C8 : 814E;  -- 	CALL   Mult16s
           1C9 : 0976;  -- 	LOAD   mres16sH
           1CA : 6008;  -- 	SHIFT  8
           1CB : 11DD;  -- 	STORE  L2T2
           1CC : 0975;  -- 	LOAD   mres16sL
           1CD : 6018;  -- 	SHIFT  -8        ; / 256
           1CE : 4A3F;  -- 	AND    LowByte
           1CF : 51DD;  -- 	OR     L2T2
           1D0 : 19DE;  -- 	ADD    L2T3     ; sum
           1D1 : 8800;  -- 	RETURN
           1D2 : 19DC;  -- 	ADD    L2T1
           1D3 : 11DD;  -- 	STORE  L2T2
           1D4 : 09DC;  -- 	LOAD   L2T1
           1D5 : 11DE;  -- 	STORE  L2T3
           1D6 : 09DD;  -- 	LOAD   L2T2
           1D7 : 11DC;  -- 	STORE  L2T1
           1D8 : 09DE;  -- 	LOAD   L2T3
           1D9 : 29B8;  -- 	JUMP   CalcDist
           1DA : 0000;  -- L2X:  DW 0
           1DB : 0000;  -- L2Y:  DW 0
           1DC : 0000;  -- L2T1: DW 0
           1DD : 0000;  -- L2T2: DW 0
           1DE : 0000;  -- L2T3: DW 0
           1DF : 9802;  -- 	OUT    TIMER
           1E0 : 9002;  -- 	IN     TIMER
           1E1 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1E2 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1E3 : 31E0;  -- 	JNEG   Wloop
           1E4 : 8800;  -- 	RETURN
           1E5 : 9802;  -- 	OUT    TIMER
           1E6 : 9002;  -- 	IN     TIMER
           1E7 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1E8 : 6FFE;  -- 	ADDI   -2          ; 0.2 seconds at 10Hz.
           1E9 : 31E6;  -- 	JNEG   Wloop2
           1EA : 8800;  -- 	RETURN
           1EB : 8203;  -- 	CALL   GetBattLvl
           1EC : 41EB;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1ED : 2253;  -- 	SUB    MinBatt
           1EE : 31F1;  -- 	JNEG   DeadBatt
           1EF : 1A53;  -- 	ADD    MinBatt     ; get original value back
           1F0 : 8800;  -- 	RETURN
           1F1 : B820;  -- 	LOADI  &H20
           1F2 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1F3 : 8203;  -- 	CALL   GetBattLvl  ; get the battery level
           1F4 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1F5 : 9805;  -- 	OUT    SSEG2
           1F6 : 9806;  -- 	OUT    LCD
           1F7 : 0A26;  -- 	LOAD   Zero
           1F8 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1F9 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1FA : 9807;  -- 	OUT    XLEDS
           1FB : 81DF;  -- 	CALL   Wait1       ; 1 second
           1FC : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           1FD : 980A;  -- 	OUT    BEEP        ; stop beeping
           1FE : 0A26;  -- 	LOAD   Zero
           1FF : 9801;  -- 	OUT    LEDS        ; LEDs off
           200 : 9807;  -- 	OUT    XLEDS
           201 : 81DF;  -- 	CALL   Wait1       ; 1 second
           202 : 29F1;  -- 	JUMP   DeadBatt    ; repeat forever
           203 : 0A55;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           204 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           205 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           206 : 8211;  -- 	CALL   BlockI2C    ; wait for it to finish
           207 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           208 : 8800;  -- 	RETURN
           209 : 8211;  -- 	CALL   BlockI2C    ; wait for idle
           20A : 0A54;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           20B : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           20C : 0A26;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           20D : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           20E : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           20F : 8211;  -- 	CALL   BlockI2C    ; wait for it to finish
           210 : 8800;  -- 	RETURN
           211 : 0A26;  -- 	LOAD   Zero
           212 : 121F;  -- 	STORE  Temp        ; Used to check for timeout
           213 : 0A1F;  -- 	LOAD   Temp
           214 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           215 : 121F;  -- 	STORE  Temp
           216 : 421A;  -- 	JZERO  I2CError    ; Timeout occurred; error
           217 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           218 : 3A13;  -- 	JPOS   BI2CL       ; If not 0, try again
           219 : 8800;  -- 	RETURN             ; Else return
           21A : 0A26;  -- 	LOAD   Zero
           21B : 692C;  -- 	ADDI   &H12C       ; "I2C"
           21C : 9804;  -- 	OUT    SSEG1
           21D : 9805;  -- 	OUT    SSEG2       ; display error message
           21E : 2A1A;  -- 	JUMP   I2CError
           21F : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           220 : 0000;  -- SonVal0:	DW 0
           221 : 0000;  -- SonVal5:	DW 0
           222 : 0000;  -- ExceedCount: DW 0
           223 : 0000;  -- PVel:		DW 0 ; Previous velocity
           224 : 0000;  -- WallDiff:	DW 0
           225 : FFFF;  -- NegOne:   DW -1
           226 : 0000;  -- Zero:     DW 0
           227 : 0001;  -- One:      DW 1
           228 : 0002;  -- Two:      DW 2
           229 : 0003;  -- Three:    DW 3
           22A : 0004;  -- Four:     DW 4
           22B : 0005;  -- Five:     DW 5
           22C : 0006;  -- Six:      DW 6
           22D : 0007;  -- Seven:    DW 7
           22E : 0008;  -- Eight:    DW 8
           22F : 0009;  -- Nine:     DW 9
           230 : 000A;  -- Ten:      DW 10
           231 : 1000;  -- InvalidDistance: 	DW 4096
           232 : 0600;  -- TooFarAwayDistance:	DW 1536 ; 0x500
           233 : 0300;  -- Sect3WallDistance:	DW 768	; 0x300
           234 : 0064;  -- ReevalDistance:		DW 100	; ~130mm
           235 : 0440;  -- HalfSecBeep: 		DW &H0440	; 1KHz for 0.5 seconds
           236 : 0001;  -- Mask0:    DW &B00000001
           237 : 0002;  -- Mask1:    DW &B00000010
           238 : 0004;  -- Mask2:    DW &B00000100
           239 : 0008;  -- Mask3:    DW &B00001000
           23A : 0010;  -- Mask4:    DW &B00010000
           23B : 0020;  -- Mask5:    DW &B00100000
           23C : 0021;  -- Mask50:	  DW &B00100001 ; Mask0 OR Mask5
           23D : 0040;  -- Mask6:    DW &B01000000
           23E : 0080;  -- Mask7:    DW &B10000000
           23F : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           240 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           241 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           242 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           243 : 0125;  -- Ft1:      DW 293
           244 : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           245 : 036F;  -- Ft3:      DW 879
           246 : 0494;  -- Ft4:      DW 1172
           247 : 05B9;  -- Ft5:      DW 1465
           248 : 06DE;  -- Ft6:      DW 1758
           249 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           24A : 00B4;  -- Deg180:   DW 180       ; 180
           24B : 010E;  -- Deg270:   DW 270       ; 270
           24C : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           24D : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           24E : FF9C;  -- RSlow:    DW -100
           24F : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           250 : FEA2;  -- RMid:     DW -350
           251 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           252 : FE0C;  -- RFast:    DW -500
           253 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           254 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           255 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
