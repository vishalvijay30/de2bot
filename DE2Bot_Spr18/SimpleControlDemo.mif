-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2849;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A67;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10E5;  -- 	STORE  DVel        ; Reset API variables
           009 : 10E4;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 824B;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 822D;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A76;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A73;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A73;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1261;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5261;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A74;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A67;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 10E0;  -- 	STORE	Part		;Reset internal variables
           024 : 10DB;  -- 	STORE	Realigning
           025 : 10E1;  -- 	STORE	TimeOutOfRange
           026 : 10E2;  -- 	STORE 	State
           027 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           028 : B800;  -- 	LOADI  0
           029 : 10E5;  -- 	STORE  DVel        ; zero desired forward velocity
           02A : 10E4;  -- 	STORE  DTheta      ; desired heading = 0 degrees
           02B : 080F;  -- 	LOAD   15          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           02C : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           02D : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02E : 0A77;  -- 	LOAD 	Mask5
           02F : 98B2;  -- 	OUT		SONAREN	; Enable sonars 0 and 5 (180 degrees apart)
           030 : B92C;  -- 	LOADI 	300
           031 : 10E5;  -- 	STORE	DVel
           032 : 4A67;  -- 	AND		ZERO
           033 : 69F4;  -- 	ADDI	500
           034 : 10DC;  -- 	STORE	DistanceToTravel
           035 : 90C0;  -- 	IN 		XPOS
           036 : 1222;  -- 	STORE 	L2X
           037 : 90C1;  -- 	IN 		YPOS
           038 : 1223;  -- 	STORE 	L2Y
           039 : 81F8;  -- 	CALL	L2ESTIMATE
           03A : 20DC;  -- 	SUB		DistanceToTravel
           03B : 3035;  -- 	JNEG	CheckDistance ;I need to continue moving
           03C : 0A68;  -- 	LOAD	ONE
           03D : 10E2;  -- 	STORE	State
           03E : 80E6;  -- nothing:	CALL 	ControlMovement
           03F : 283E;  -- 			JUMP 	nothing
           040 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           041 : 0A67;  -- 	LOAD   Zero        ; Stop everything.
           042 : 9883;  -- 	OUT    LVELCMD
           043 : 988B;  -- 	OUT    RVELCMD
           044 : 98B2;  -- 	OUT    SONAREN
           045 : 0848;  -- 	LOAD   DEAD        ; An indication that we are dead
           046 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           047 : 2847;  -- 	JUMP   Forever     ; Do this forever.
           048 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           049 : 90AD;  -- 	IN		DIST5
           04A : 10D8;  -- 	STORE	NewSonarReading
           04B : 9804;  -- 	OUT		SSEG1
           04C : 08E2;  -- 	LOAD	State
           04D : 6FFF;  -- 	ADDI	-1
           04E : 4050;  -- 	JZERO	State1
           04F : B000;  -- 	RETI
           050 : 08DB;  -- 	LOAD Realigning
           051 : 388C;  -- 	JPOS Realign
           052 : 08D8;  -- 	LOAD	NewSonarReading
           053 : 20DF;  -- 	SUB		LongRangeS1
           054 : 3858;  -- 	JPOS	AddOneToRangeCounter
           055 : 4A67;  -- 	AND		ZERO
           056 : 10E1;  -- 	STORE	TimeOutOfRange
           057 : 285B;  -- 	JUMP	BadName
           058 : 08E1;  -- 	LOAD	TimeOutOfRange
           059 : 6801;  -- 	ADDI	1		
           05A : 10E1;  -- 	STORE	TimeOutOfRange
           05B : 08E1;  -- 	LOAD	TimeOutOfRange
           05C : 6FFB;  -- 	ADDI	-5
           05D : 38B8;  -- 	JPOS	Part3
           05E : 08E0;  -- 	LOAD 	Part
           05F : 6FFD;  -- 	ADDI	-3
           060 : 40C3;  -- 	JZERO	Part3Continue
           061 : 6FFF;  -- 	ADDI	-1
           062 : 40D2;  -- 	JZERO	Part4
           063 : B85A;  -- 	LOADI	90
           064 : 10E4;  -- 	STORE 	DTheta
           065 : 80E6;  -- 	CALL    ControlMovement
           066 : B800;  -- 	LOADI   0
           067 : 10E4;  -- 	STORE 	DTheta
           068 : B92C;  -- 	LOADI   300
           069 : 10E5;  -- 	STORE   DVel
           06A : 90AD;  -- Move:	IN      DIST5
           06B : 6CE0;  -- 		ADDI    -800
           06C : 386A;  -- 		JPOS    Move
           06D : B800;  -- 		LOADI   0
           06E : 10E5;  -- 		STORE   DVel
           06F : 08DD;  -- 	LOAD 	Wait
           070 : 4074;  -- 	JZERO	Begin
           071 : 4A67;  -- 	AND		ZERO
           072 : 10DD;  -- 	STORE  	Wait
           073 : 28B4;  -- 	JUMP	iamdone
           074 : 08D8;  -- 	LOAD	NewSonarReading
           075 : 20D7;  -- 	SUB 	LastSonarReading
           076 : 10D9;  -- 	STORE 	Delta
           077 : 387A;  -- 	JPOS 	FacingAway
           078 : 3083;  -- 	JNEG 	FacingTowards
           079 : 40B4;  -- 	JZERO 	iamdone
           07A : 20DA;  -- 	SUB 	Threshold
           07B : 3096;  -- 	JNEG 	BeginRealign	;if we are heading straight, see if we need to realign
           07C : 08E4;  -- 	LOAD 	DTheta
           07D : 6FFB;  -- 	ADDI 	-5
           07E : 8127;  -- 	CALL 	Mod360
           07F : 10E4;  -- 	STORE 	DTheta
           080 : 0A68;  -- 	LOAD 	ONE
           081 : 10DD;  -- 	STORE 	Wait
           082 : 28B4;  -- 	JUMP	iamdone
           083 : 18DA;  -- 	ADD 	Threshold
           084 : 3896;  -- 	JPOS 	BeginRealign	;if we are heading straight, see if we need to realign
           085 : 08E4;  -- 	LOAD 	DTheta
           086 : 6805;  -- 	ADDI 	5
           087 : 8127;  -- 	CALL 	Mod360
           088 : 10E4;  -- 	STORE 	DTheta
           089 : 0A68;  -- 	LOAD 	ONE
           08A : 10DD;  -- 	STORE 	Wait
           08B : 28B4;  -- 	JUMP 	iamdone
           08C : 90C0;  -- 	IN 		XPOS
           08D : 1222;  -- 	STORE 	L2X
           08E : 90C1;  -- 	IN 		YPOS
           08F : 1223;  -- 	STORE 	L2Y
           090 : 81F8;  -- 	CALL	L2ESTIMATE
           091 : 20DC;  -- 	SUB		DistanceToTravel
           092 : 30B4;  -- 	JNEG	iamdone ;I need to continue realigning
           093 : 0A67;  -- 	LOAD 	ZERO
           094 : 10E4;  -- 	STORE	DTheta
           095 : 10DB;  -- 	STORE	Realigning
           096 : 90AD;  -- 	IN		DIST5
           097 : 20DE;  -- 	SUB		DesiredDisFromWall
           098 : 6FF6;  -- 	ADDI	-10
           099 : 389D;  -- 	JPOS	SecondPart
           09A : 6814;  -- 	ADDI	20
           09B : 309D;  -- 	JNEG	SecondPart
           09C : 40B4;  -- 	JZERO	iamdone		;We are in the desired range (440 - 460 H)
           09D : 98C3;  -- 	OUT 	RESETPOS
           09E : 4A67;  -- 	AND		ZERO
           09F : 10E4;  -- 	STORE	DTheta
           0A0 : 08D8;  -- 	LOAD 	NewSonarReading
           0A1 : 20DE;  -- 	SUB		DesiredDisFromWall		;if neg, too close to wall
           0A2 : 1223;  -- 	STORE 	L2Y
           0A3 : 11B9;  -- 	STORE 	m16sA
           0A4 : 0A6F;  -- 	LOAD 	EIGHT
           0A5 : 11BA;  -- 	STORE 	m16sB
           0A6 : 8196;  -- 	CALL	Mult16s
           0A7 : 09BD;  -- 	LOAD	mres16sL
           0A8 : 1222;  -- 	STORE L2X
           0A9 : 81F8;  -- 	CALL L2Estimate
           0AA : 10DC;  -- 	STORE DistanceToTravel
           0AB : 08D8;  -- 	LOAD		NewSonarReading
           0AC : 20DE;  -- 	SUB			DesiredDisFromWall	;if neg, too close to wall
           0AD : 30B2;  -- 	JNEG		TurnCounterClockwise
           0AE : 0A67;  -- 	LOAD 	ZERO
           0AF : 6FF9;  -- 	ADDI	-7
           0B0 : 10E4;  -- 	STORE 	DTheta
           0B1 : 28B4;  -- 	JUMP	iamdone
           0B2 : 0A6E;  -- 	LOAD 	SEVEN
           0B3 : 10E4;  -- 	STORE 	DTheta
           0B4 : 08D8;  -- 	LOAD	NewSonarReading
           0B5 : 10D7;  -- 	STORE 	LastSonarReading
           0B6 : 80E6;  -- 	CALL 	ControlMovement
           0B7 : B000;  -- 	RETI
           0B8 : 90AD;  -- 	IN		DIST5
           0B9 : 9804;  -- 	OUT 	SSEG1
           0BA : 0A67;  -- 	LOAD 	ZERO
           0BB : 10E4;  -- 	STORE	DTheta
           0BC : 68C8;  -- 	ADDI	200
           0BD : 10E5;  -- 	STORE	DVel
           0BE : 0A6A;  -- 	LOAD	THREE
           0BF : 10E0;  -- 	STORE	Part
           0C0 : 4A67;  -- 	AND		ZERO
           0C1 : 6B98;  -- 	ADDI	920
           0C2 : 10DC;  -- 	STORE	DistanceToTravel
           0C3 : 90AD;  -- 	IN		DIST5
           0C4 : 9804;  -- 	OUT 	SSEG1
           0C5 : 90C0;  -- 	IN 		XPOS
           0C6 : 1222;  -- 	STORE 	L2X
           0C7 : 90C1;  -- 	IN 		YPOS
           0C8 : 1223;  -- 	STORE 	L2Y
           0C9 : 81F8;  -- 	CALL	L2ESTIMATE
           0CA : 20DC;  -- 	SUB		DistanceToTravel
           0CB : 30B4;  -- 	JNEG	iamdone ;I need to continue moving
           0CC : 0A6B;  -- 	LOAD 	FOUR
           0CD : 10E0;  -- 	STORE	Part
           0CE : 0A67;  -- 	LOAD	ZERO
           0CF : 10E5;  -- 	STORE 	DVel
           0D0 : 80E6;  -- 	CALL	ControlMovement
           0D1 : B000;  -- 	RETI
           0D2 : 0A67;  -- 	LOAD	ZERO
           0D3 : 6FFF;  -- 	ADDI	-1
           0D4 : 9805;  -- 	OUT		SSEG2
           0D5 : 80E6;  -- 	CALL	ControlMovement
           0D6 : B000;  -- 	RETI
           0D7 : 0000;  -- LastSonarReading: 	DW &H0
           0D8 : 0000;  -- NewSonarReading:  	DW 0
           0D9 : 0000;  -- Delta:				DW &H00
           0DA : 000A;  -- Threshold: 			DW &H0A
           0DB : 0000;  -- Realigning: 		DW &B00		;1 if realigning, 0 if not
           0DC : 01F4;  -- DistanceToTravel: 	DW &H1F4
           0DD : 0000;  -- Wait:				DW 0		;1 if waiting, 0 if not
           0DE : 0450;  -- DesiredDisFromWall:	DW &H450
           0DF : 0800;  -- LongRangeS1:		DW &H800
           0E0 : 0000;  -- Part:				DW 0
           0E1 : 0000;  -- TimeOutOfRange:		DW 0
           0E2 : 0000;  -- State:				DW 0
           0E3 : B000;  -- 	RETI   ; return from ISR
           0E4 : 0000;  -- DTheta:    DW 0
           0E5 : 0000;  -- DVel:      DW 0
           0E6 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0E7 : 1126;  -- 	STORE  MaxVal
           0E8 : 8113;  -- 	CALL   GetThetaErr ; get the heading error
           0E9 : 6002;  -- 	SHIFT  2
           0EA : 1110;  -- 	STORE  CMAErr      ; hold temporarily
           0EB : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0EC : 811A;  -- 	CALL   CapValue    ; get a +/- max of 50
           0ED : 1910;  -- 	ADD    CMAErr
           0EE : 1110;  -- 	STORE  CMAErr      ; now contains a desired differential
           0EF : B9FE;  -- 	LOADI  510
           0F0 : 1126;  -- 	STORE  MaxVal
           0F1 : 08E5;  -- 	LOAD   DVel
           0F2 : 811A;  -- 	CALL   CapValue    ; ensure velocity is valid
           0F3 : 10E5;  -- 	STORE  DVel        ; overwrite any invalid input
           0F4 : 1910;  -- 	ADD    CMAErr
           0F5 : 811A;  -- 	CALL   CapValue    ; ensure velocity is valid
           0F6 : 1112;  -- 	STORE  CMAR
           0F7 : 0910;  -- 	LOAD   CMAErr
           0F8 : 812E;  -- 	CALL   Neg         ; left wheel gets negative differential
           0F9 : 18E5;  -- 	ADD    DVel
           0FA : 811A;  -- 	CALL   CapValue
           0FB : 1111;  -- 	STORE  CMAL
           0FC : 0910;  -- 	LOAD   CMAErr
           0FD : 6001;  -- 	SHIFT  1           ; double the differential
           0FE : 1110;  -- 	STORE  CMAErr
           0FF : 0912;  -- 	LOAD   CMAR
           100 : 2111;  -- 	SUB    CMAL        ; calculate the actual differential
           101 : 2110;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           102 : 410B;  -- 	JZERO  CMADone
           103 : 1110;  -- 	STORE  CMAErr      ; the missing part
           104 : 1911;  -- 	ADD    CMAL
           105 : 811A;  -- 	CALL   CapValue
           106 : 1111;  -- 	STORE  CMAL
           107 : 0912;  -- 	LOAD   CMAR
           108 : 2110;  -- 	SUB    CMAErr
           109 : 811A;  -- 	CALL   CapValue
           10A : 1112;  -- 	STORE  CMAR
           10B : 0911;  -- 	LOAD   CMAL
           10C : 9883;  -- 	OUT    LVELCMD
           10D : 0912;  -- 	LOAD   CMAR
           10E : 988B;  -- 	OUT    RVELCMD
           10F : 8800;  -- 	RETURN
           110 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           111 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           112 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           113 : 90C2;  -- 	IN     THETA
           114 : 20E4;  -- 	SUB    DTheta      ; actual - desired angle
           115 : 812E;  -- 	CALL   Neg         ; desired - actual angle
           116 : 68B4;  -- 	ADDI   180
           117 : 8127;  -- 	CALL   Mod360
           118 : 6F4C;  -- 	ADDI   -180
           119 : 8800;  -- 	RETURN
           11A : 2126;  -- 	SUB     MaxVal
           11B : 3921;  -- 	JPOS    CapVelHigh
           11C : 1926;  -- 	ADD     MaxVal
           11D : 1926;  -- 	ADD     MaxVal
           11E : 3123;  -- 	JNEG    CapVelLow
           11F : 2126;  -- 	SUB     MaxVal
           120 : 8800;  -- 	RETURN
           121 : 0926;  -- 	LOAD    MaxVal
           122 : 8800;  -- 	RETURN
           123 : 0926;  -- 	LOAD    MaxVal
           124 : 812E;  -- 	CALL    Neg
           125 : 8800;  -- 	RETURN
           126 : 01FE;  -- 	MaxVal: DW 510
           127 : 312A;  -- 	JNEG   M360N
           128 : 6E98;  -- 	ADDI   -360
           129 : 2927;  -- 	JUMP   Mod360
           12A : 6968;  -- 	ADDI   360
           12B : 312A;  -- 	JNEG   M360N
           12C : 8800;  -- 	RETURN
           12D : 3930;  -- 	JPOS   Abs_r
           12E : 5A66;  -- 	XOR    NegOne       ; Flip all bits
           12F : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           130 : 8800;  -- 	RETURN
           131 : 0991;  -- 	LOAD   AtanY
           132 : 812D;  -- 	CALL   Abs          ; abs(y)
           133 : 1193;  -- 	STORE  AtanT
           134 : 0990;  -- 	LOAD   AtanX        ; abs(x)
           135 : 812D;  -- 	CALL   Abs
           136 : 2193;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           137 : 3142;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           138 : 0990;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           139 : 313F;  -- 	JNEG   A2_R3
           13A : 8151;  -- 	CALL   A2_calc      ; Octants 1, 8
           13B : 313D;  -- 	JNEG   A2_R1n
           13C : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           13D : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           13E : 8800;  -- 	RETURN
           13F : 8151;  -- 	CALL   A2_calc      ; Octants 4, 5            
           140 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           141 : 8800;  -- 	RETURN
           142 : 0991;  -- 	LOAD   AtanY        ; Swap input arguments
           143 : 1193;  -- 	STORE  AtanT
           144 : 0990;  -- 	LOAD   AtanX
           145 : 1191;  -- 	STORE  AtanY
           146 : 0993;  -- 	LOAD   AtanT
           147 : 1190;  -- 	STORE  AtanX
           148 : 394D;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           149 : 8151;  -- 	CALL   A2_calc      ; else octants 6, 7
           14A : 812E;  -- 	CALL   Neg          ; Negatge the number
           14B : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           14C : 8800;  -- 	RETURN
           14D : 8151;  -- 	CALL   A2_calc      ; Octants 2, 3
           14E : 812E;  -- 	CALL   Neg          ; negate the angle
           14F : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           150 : 8800;  -- 	RETURN
           151 : 0991;  -- 	LOAD   AtanY
           152 : 11F0;  -- 	STORE  d16sN        ; Y in numerator
           153 : 0990;  -- 	LOAD   AtanX
           154 : 11F1;  -- 	STORE  d16sD        ; X in denominator
           155 : 817D;  -- 	CALL   A2_div       ; divide
           156 : 09F6;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           157 : 1192;  -- 	STORE  AtanRatio
           158 : 11B9;  -- 	STORE  m16sA
           159 : 11BA;  -- 	STORE  m16sB
           15A : 8174;  -- 	CALL   A2_mult      ; X^2
           15B : 11B9;  -- 	STORE  m16sA
           15C : 0994;  -- 	LOAD   A2c
           15D : 11BA;  -- 	STORE  m16sB
           15E : 8174;  -- 	CALL   A2_mult
           15F : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           160 : 11F1;  -- 	STORE  d16sD
           161 : 0992;  -- 	LOAD   AtanRatio
           162 : 11F0;  -- 	STORE  d16sN        ; Ratio in numerator
           163 : 817D;  -- 	CALL   A2_div       ; divide
           164 : 09F6;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           165 : 11B9;  -- 	STORE  m16sA        ; <= result in radians
           166 : 0995;  -- 	LOAD   A2cd         ; degree conversion factor
           167 : 11BA;  -- 	STORE  m16sB
           168 : 8174;  -- 	CALL   A2_mult      ; convert to degrees
           169 : 1193;  -- 	STORE  AtanT
           16A : 6017;  -- 	SHIFT  -7           ; check 7th bit
           16B : 4A68;  -- 	AND    One
           16C : 4171;  -- 	JZERO  A2_rdwn      ; round down
           16D : 0993;  -- 	LOAD   AtanT
           16E : 6018;  -- 	SHIFT  -8
           16F : 6801;  -- 	ADDI   1            ; round up
           170 : 8800;  -- 	RETURN
           171 : 0993;  -- 	LOAD   AtanT
           172 : 6018;  -- 	SHIFT  -8           ; round down
           173 : 8800;  -- 	RETURN
           174 : 8196;  -- 	CALL   Mult16s
           175 : 09BE;  -- 	LOAD   mres16sH
           176 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           177 : 11BE;  -- 	STORE  mres16sH
           178 : 09BD;  -- 	LOAD   mres16sL
           179 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           17A : 4A7A;  -- 	AND    LowByte
           17B : 51BE;  -- 	OR     mres16sH     ; combine high and low words of result
           17C : 8800;  -- 	RETURN
           17D : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           17E : 1193;  -- 	STORE  AtanT
           17F : 0993;  -- 	LOAD   AtanT
           180 : 6FFF;  -- 	ADDI   -1
           181 : 3984;  -- 	JPOS   A2_DN        ; not done; continue shifting
           182 : 81BF;  -- 	CALL   Div16s       ; do the standard division
           183 : 8800;  -- 	RETURN
           184 : 1193;  -- 	STORE  AtanT
           185 : 09F0;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           186 : 6001;  -- 	SHIFT  1
           187 : 59F0;  -- 	XOR    d16sN        ; if the sign changed,
           188 : 318C;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           189 : 59F0;  -- 	XOR    d16sN        ; get back shifted version
           18A : 11F0;  -- 	STORE  d16sN
           18B : 297F;  -- 	JUMP   A2_DL
           18C : 09F1;  -- 	LOAD   d16sD
           18D : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           18E : 11F1;  -- 	STORE  d16sD
           18F : 297F;  -- 	JUMP   A2_DL
           190 : 0000;  -- AtanX:      DW 0
           191 : 0000;  -- AtanY:      DW 0
           192 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           193 : 0000;  -- AtanT:      DW 0        ; temporary value
           194 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           195 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           196 : B800;  -- 	LOADI  0
           197 : 11BB;  -- 	STORE  m16sc        ; clear carry
           198 : 11BE;  -- 	STORE  mres16sH     ; clear result
           199 : B810;  -- 	LOADI  16           ; load 16 to counter
           19A : 11BC;  -- 	STORE  mcnt16s      
           19B : 09BB;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           19C : 41A0;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           19D : 09BE;  -- 	LOAD   mres16sH     ; if a carry, 
           19E : 19B9;  -- 	ADD    m16sA        ;  add multiplicand to result H
           19F : 11BE;  -- 	STORE  mres16sH
           1A0 : 09BA;  -- 	LOAD   m16sB
           1A1 : 4A68;  -- 	AND    One          ; check bit 0 of multiplier
           1A2 : 11BB;  -- 	STORE  m16sc        ; save as next carry
           1A3 : 41A7;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1A4 : 09BE;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1A5 : 21B9;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1A6 : 11BE;  -- 	STORE  mres16sH
           1A7 : 09BA;  -- 	LOAD   m16sB
           1A8 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1A9 : 49B8;  -- 	AND    c7FFF        ; clear msb
           1AA : 11BA;  -- 	STORE  m16sB
           1AB : 09BE;  -- 	LOAD   mres16sH     ; load result H
           1AC : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1AD : 51BA;  -- 	OR     m16sB
           1AE : 11BA;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1AF : 09BE;  -- 	LOAD   mres16sH
           1B0 : 6011;  -- 	SHIFT  -1
           1B1 : 11BE;  -- 	STORE  mres16sH     ; shift result H >>1
           1B2 : 09BC;  -- 	LOAD   mcnt16s
           1B3 : 6FFF;  -- 	ADDI   -1           ; check counter
           1B4 : 399A;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1B5 : 09BA;  -- 	LOAD   m16sB
           1B6 : 11BD;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1B7 : 8800;  -- 	RETURN              ; Done
           1B8 : 7FFF;  -- c7FFF: DW &H7FFF
           1B9 : 0000;  -- m16sA: DW 0 ; multiplicand
           1BA : 0000;  -- m16sB: DW 0 ; multipler
           1BB : 0000;  -- m16sc: DW 0 ; carry
           1BC : 0000;  -- mcnt16s: DW 0 ; counter
           1BD : 0000;  -- mres16sL: DW 0 ; result low
           1BE : 0000;  -- mres16sH: DW 0 ; result high
           1BF : B800;  -- 	LOADI  0
           1C0 : 11F7;  -- 	STORE  dres16sR     ; clear remainder result
           1C1 : 11F4;  -- 	STORE  d16sC1       ; clear carry
           1C2 : 09F0;  -- 	LOAD   d16sN
           1C3 : 59F1;  -- 	XOR    d16sD
           1C4 : 11F2;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1C5 : B811;  -- 	LOADI  17
           1C6 : 11F3;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1C7 : 09F1;  -- 	LOAD   d16sD
           1C8 : 812D;  -- 	CALL   Abs          ; take absolute value of denominator
           1C9 : 11F1;  -- 	STORE  d16sD
           1CA : 09F0;  -- 	LOAD   d16sN
           1CB : 812D;  -- 	CALL   Abs          ; take absolute value of numerator
           1CC : 11F0;  -- 	STORE  d16sN
           1CD : 09F0;  -- 	LOAD   d16sN
           1CE : 601F;  -- 	SHIFT  -15          ; get msb
           1CF : 4A68;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1D0 : 11F5;  -- 	STORE  d16sC2       ; store as carry
           1D1 : 09F0;  -- 	LOAD   d16sN
           1D2 : 6001;  -- 	SHIFT  1            ; shift <<1
           1D3 : 51F4;  -- 	OR     d16sC1       ; with carry
           1D4 : 11F0;  -- 	STORE  d16sN
           1D5 : 09F3;  -- 	LOAD   d16sT
           1D6 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1D7 : 41E7;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1D8 : 11F3;  -- 	STORE  d16sT
           1D9 : 09F7;  -- 	LOAD   dres16sR
           1DA : 6001;  -- 	SHIFT  1            ; shift remainder
           1DB : 51F5;  -- 	OR     d16sC2       ; with carry from other shift
           1DC : 21F1;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1DD : 31E2;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1DE : 11F7;  -- 	STORE  dres16sR
           1DF : B801;  -- 	LOADI  1
           1E0 : 11F4;  -- 	STORE  d16sC1       ; set carry
           1E1 : 29CD;  -- 	JUMP   Div16s_loop
           1E2 : 19F1;  -- 	ADD    d16sD        ; add denominator back in
           1E3 : 11F7;  -- 	STORE  dres16sR
           1E4 : B800;  -- 	LOADI  0
           1E5 : 11F4;  -- 	STORE  d16sC1       ; clear carry
           1E6 : 29CD;  -- 	JUMP   Div16s_loop
           1E7 : 09F0;  -- 	LOAD   d16sN
           1E8 : 11F6;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1E9 : 09F2;  -- 	LOAD   d16sS        ; check the sign indicator
           1EA : 31EC;  -- 	JNEG   Div16s_neg
           1EB : 8800;  -- 	RETURN
           1EC : 09F6;  -- 	LOAD   dres16sQ     ; need to negate the result
           1ED : 812E;  -- 	CALL   Neg
           1EE : 11F6;  -- 	STORE  dres16sQ
           1EF : 8800;  -- 	RETURN	
           1F0 : 0000;  -- d16sN: DW 0 ; numerator
           1F1 : 0000;  -- d16sD: DW 0 ; denominator
           1F2 : 0000;  -- d16sS: DW 0 ; sign value
           1F3 : 0000;  -- d16sT: DW 0 ; temp counter
           1F4 : 0000;  -- d16sC1: DW 0 ; carry value
           1F5 : 0000;  -- d16sC2: DW 0 ; carry value
           1F6 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1F7 : 0000;  -- dres16sR: DW 0 ; remainder result
           1F8 : 0A22;  -- 	LOAD   L2X
           1F9 : 812D;  -- 	CALL   Abs
           1FA : 1224;  -- 	STORE  L2T1
           1FB : 0A23;  -- 	LOAD   L2Y
           1FC : 812D;  -- 	CALL   Abs
           1FD : 2224;  -- 	SUB    L2T1
           1FE : 321A;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1FF : 1A24;  -- 	ADD    L2T1
           200 : 11B9;  -- 	STORE  m16sa
           201 : B8F6;  -- 	LOADI  246       ; max * 246
           202 : 11BA;  -- 	STORE  m16sB
           203 : 8196;  -- 	CALL   Mult16s
           204 : 09BE;  -- 	LOAD   mres16sH
           205 : 6008;  -- 	SHIFT  8
           206 : 1225;  -- 	STORE  L2T2
           207 : 09BD;  -- 	LOAD   mres16sL
           208 : 6018;  -- 	SHIFT  -8        ; / 256
           209 : 4A7A;  -- 	AND    LowByte
           20A : 5225;  -- 	OR     L2T2
           20B : 1226;  -- 	STORE  L2T3
           20C : 0A24;  -- 	LOAD   L2T1
           20D : 11B9;  -- 	STORE  m16sa
           20E : B868;  -- 	LOADI  104       ; min * 104
           20F : 11BA;  -- 	STORE  m16sB
           210 : 8196;  -- 	CALL   Mult16s
           211 : 09BE;  -- 	LOAD   mres16sH
           212 : 6008;  -- 	SHIFT  8
           213 : 1225;  -- 	STORE  L2T2
           214 : 09BD;  -- 	LOAD   mres16sL
           215 : 6018;  -- 	SHIFT  -8        ; / 256
           216 : 4A7A;  -- 	AND    LowByte
           217 : 5225;  -- 	OR     L2T2
           218 : 1A26;  -- 	ADD    L2T3     ; sum
           219 : 8800;  -- 	RETURN
           21A : 1A24;  -- 	ADD    L2T1
           21B : 1225;  -- 	STORE  L2T2
           21C : 0A24;  -- 	LOAD   L2T1
           21D : 1226;  -- 	STORE  L2T3
           21E : 0A25;  -- 	LOAD   L2T2
           21F : 1224;  -- 	STORE  L2T1
           220 : 0A26;  -- 	LOAD   L2T3
           221 : 2A00;  -- 	JUMP   CalcDist
           222 : 0000;  -- L2X:  DW 0
           223 : 0000;  -- L2Y:  DW 0
           224 : 0000;  -- L2T1: DW 0
           225 : 0000;  -- L2T2: DW 0
           226 : 0000;  -- L2T3: DW 0
           227 : 9802;  -- 	OUT    TIMER
           228 : 9002;  -- 	IN     TIMER
           229 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           22A : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           22B : 3228;  -- 	JNEG   Wloop
           22C : 8800;  -- 	RETURN
           22D : 8245;  -- 	CALL   GetBattLvl
           22E : 422D;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           22F : 228B;  -- 	SUB    MinBatt
           230 : 3233;  -- 	JNEG   DeadBatt
           231 : 1A8B;  -- 	ADD    MinBatt     ; get original value back
           232 : 8800;  -- 	RETURN
           233 : B820;  -- 	LOADI  &H20
           234 : 980A;  -- 	OUT    BEEP        ; start beep sound
           235 : 8245;  -- 	CALL   GetBattLvl  ; get the battery level
           236 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           237 : 9805;  -- 	OUT    SSEG2
           238 : 9806;  -- 	OUT    LCD
           239 : 0A67;  -- 	LOAD   Zero
           23A : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           23B : 9801;  -- 	OUT    LEDS        ; all LEDs on
           23C : 9807;  -- 	OUT    XLEDS
           23D : 8227;  -- 	CALL   Wait1       ; 1 second
           23E : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           23F : 980A;  -- 	OUT    BEEP        ; stop beeping
           240 : 0A67;  -- 	LOAD   Zero
           241 : 9801;  -- 	OUT    LEDS        ; LEDs off
           242 : 9807;  -- 	OUT    XLEDS
           243 : 8227;  -- 	CALL   Wait1       ; 1 second
           244 : 2A33;  -- 	JUMP   DeadBatt    ; repeat forever
           245 : 0A8D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           246 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           247 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           248 : 8253;  -- 	CALL   BlockI2C    ; wait for it to finish
           249 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           24A : 8800;  -- 	RETURN
           24B : 8253;  -- 	CALL   BlockI2C    ; wait for idle
           24C : 0A8C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           24D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           24E : 0A67;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           24F : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           250 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           251 : 8253;  -- 	CALL   BlockI2C    ; wait for it to finish
           252 : 8800;  -- 	RETURN
           253 : 0A67;  -- 	LOAD   Zero
           254 : 1261;  -- 	STORE  Temp        ; Used to check for timeout
           255 : 0A61;  -- 	LOAD   Temp
           256 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           257 : 1261;  -- 	STORE  Temp
           258 : 425C;  -- 	JZERO  I2CError    ; Timeout occurred; error
           259 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           25A : 3A55;  -- 	JPOS   BI2CL       ; If not 0, try again
           25B : 8800;  -- 	RETURN             ; Else return
           25C : 0A67;  -- 	LOAD   Zero
           25D : 692C;  -- 	ADDI   &H12C       ; "I2C"
           25E : 9804;  -- 	OUT    SSEG1
           25F : 9805;  -- 	OUT    SSEG2       ; display error message
           260 : 2A5C;  -- 	JUMP   I2CError
           261 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           262 : 0000;  -- SonVal0:  DW 0
           263 : 0000;  -- SonVal5:  DW 0
           264 : 0000;  -- ExceedCount: DW 0
           265 : 0000;  -- Period:	  DW 0
           266 : FFFF;  -- NegOne:   DW -1
           267 : 0000;  -- Zero:     DW 0
           268 : 0001;  -- One:      DW 1
           269 : 0002;  -- Two:      DW 2
           26A : 0003;  -- Three:    DW 3
           26B : 0004;  -- Four:     DW 4
           26C : 0005;  -- Five:     DW 5
           26D : 0006;  -- Six:      DW 6
           26E : 0007;  -- Seven:    DW 7
           26F : 0008;  -- Eight:    DW 8
           270 : 0009;  -- Nine:     DW 9
           271 : 000A;  -- Ten:      DW 10
           272 : 0001;  -- Mask0:    DW &B00000001
           273 : 0002;  -- Mask1:    DW &B00000010
           274 : 0004;  -- Mask2:    DW &B00000100
           275 : 0008;  -- Mask3:    DW &B00001000
           276 : 0010;  -- Mask4:    DW &B00010000
           277 : 0020;  -- Mask5:    DW &B00100000
           278 : 0040;  -- Mask6:    DW &B01000000
           279 : 0080;  -- Mask7:    DW &B10000000
           27A : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           27B : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           27C : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           27D : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           27E : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           27F : 036F;  -- Ft3:      DW 879
           280 : 0494;  -- Ft4:      DW 1172
           281 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           282 : 00B4;  -- Deg180:   DW 180       ; 180
           283 : 010E;  -- Deg270:   DW 270       ; 270
           284 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           285 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           286 : FF9C;  -- RSlow:    DW -100
           287 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           288 : FEA2;  -- RMid:     DW -350
           289 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           28A : FE0C;  -- RFast:    DW -500
           28B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           28C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           28D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
